// Code generated by "enumer -type=gatewayDeviceModel -transform=snake -trimprefix=dev"; DO NOT EDIT.

package miio

import (
	"fmt"
)

const _gatewayDeviceModelName = "gatewayswitchsensor_htmagnetmotion"

var _gatewayDeviceModelIndex = [...]uint8{0, 7, 13, 22, 28, 34}

func (i gatewayDeviceModel) String() string {
	if i < 0 || i >= gatewayDeviceModel(len(_gatewayDeviceModelIndex)-1) {
		return fmt.Sprintf("gatewayDeviceModel(%d)", i)
	}
	return _gatewayDeviceModelName[_gatewayDeviceModelIndex[i]:_gatewayDeviceModelIndex[i+1]]
}

var _gatewayDeviceModelValues = []gatewayDeviceModel{0, 1, 2, 3, 4}

var _gatewayDeviceModelNameToValueMap = map[string]gatewayDeviceModel{
	_gatewayDeviceModelName[0:7]:   0,
	_gatewayDeviceModelName[7:13]:  1,
	_gatewayDeviceModelName[13:22]: 2,
	_gatewayDeviceModelName[22:28]: 3,
	_gatewayDeviceModelName[28:34]: 4,
}

// gatewayDeviceModelString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func gatewayDeviceModelString(s string) (gatewayDeviceModel, error) {
	if val, ok := _gatewayDeviceModelNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to gatewayDeviceModel values", s)
}

// gatewayDeviceModelValues returns all values of the enum
func gatewayDeviceModelValues() []gatewayDeviceModel {
	return _gatewayDeviceModelValues
}

// IsAgatewayDeviceModel returns "true" if the value is listed in the enum definition. "false" otherwise
func (i gatewayDeviceModel) IsAgatewayDeviceModel() bool {
	for _, v := range _gatewayDeviceModelValues {
		if i == v {
			return true
		}
	}
	return false
}

// Code generated by "enumer -type=fldName -transform=snake -trimprefix=Field"; DO NOT EDIT.

package miio

import (
	"fmt"
)

const _fldNameName = "field_rgbfield_namefield_humidityfield_voltagefield_statusfield_no_motion"

var _fldNameIndex = [...]uint8{0, 9, 19, 33, 46, 58, 73}

func (i fldName) String() string {
	if i < 0 || i >= fldName(len(_fldNameIndex)-1) {
		return fmt.Sprintf("fldName(%d)", i)
	}
	return _fldNameName[_fldNameIndex[i]:_fldNameIndex[i+1]]
}

var _fldNameValues = []fldName{0, 1, 2, 3, 4, 5}

var _fldNameNameToValueMap = map[string]fldName{
	_fldNameName[0:9]:   0,
	_fldNameName[9:19]:  1,
	_fldNameName[19:33]: 2,
	_fldNameName[33:46]: 3,
	_fldNameName[46:58]: 4,
	_fldNameName[58:73]: 5,
}

// fldNameString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func fldNameString(s string) (fldName, error) {
	if val, ok := _fldNameNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to fldName values", s)
}

// fldNameValues returns all values of the enum
func fldNameValues() []fldName {
	return _fldNameValues
}

// IsAfldName returns "true" if the value is listed in the enum definition. "false" otherwise
func (i fldName) IsAfldName() bool {
	for _, v := range _fldNameValues {
		if i == v {
			return true
		}
	}
	return false
}

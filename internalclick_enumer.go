// Code generated by "enumer -type=internalClick -transform=snake -trimprefix=cl"; DO NOT EDIT.

package miio

import (
	"fmt"
)

const _internalClickName = "clickdouble_clicklong_click_presslong_click_release"

var _internalClickIndex = [...]uint8{0, 5, 17, 33, 51}

func (i internalClick) String() string {
	if i < 0 || i >= internalClick(len(_internalClickIndex)-1) {
		return fmt.Sprintf("internalClick(%d)", i)
	}
	return _internalClickName[_internalClickIndex[i]:_internalClickIndex[i+1]]
}

var _internalClickValues = []internalClick{0, 1, 2, 3}

var _internalClickNameToValueMap = map[string]internalClick{
	_internalClickName[0:5]:   0,
	_internalClickName[5:17]:  1,
	_internalClickName[17:33]: 2,
	_internalClickName[33:51]: 3,
}

// internalClickString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func internalClickString(s string) (internalClick, error) {
	if val, ok := _internalClickNameToValueMap[s]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to internalClick values", s)
}

// internalClickValues returns all values of the enum
func internalClickValues() []internalClick {
	return _internalClickValues
}

// IsAinternalClick returns "true" if the value is listed in the enum definition. "false" otherwise
func (i internalClick) IsAinternalClick() bool {
	for _, v := range _internalClickValues {
		if i == v {
			return true
		}
	}
	return false
}
